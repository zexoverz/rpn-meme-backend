// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  imageUrl  String?
  imageId   String?   
  email     String?   @unique
  password  String    
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
  isEmailVerified Boolean @default(false)
  
  // Relations
  tokens    Token[]
  posts    Post[]
  likes    Like[]
  saves    Save[]
  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  token     String    @db.VarChar(400)
  userId    String    
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  expires   DateTime
  blacklisted Boolean @default(false)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @default(now())
}

model Post {
  id        String   @id @default(uuid())
  caption   String?
  imageUrl  String
  imageId   String   // For storage reference
  location  String?
  tags      String[] // PostgreSQL supports array type
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String
  likes     Like[]
  saves     Save[]

  @@map("posts")
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String

  @@unique([userId, postId])
  @@map("likes")
}

model Save {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  // Relations
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String

  @@unique([userId, postId])
  @@map("saves")
}